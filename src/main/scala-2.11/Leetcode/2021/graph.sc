//https://leetcode.com/problems/count-nodes-with-the-highest-score/
def getEdgeMap(parents: Array[Int]):Map[Int, Set[Int]]={
  parents.zipWithIndex.groupBy{case(from ,_) => from}.collect{case (from, lst) if (from != -1) =>
    (from, lst.map(tup => tup._2).toSet)}
}

def dfs(toVisit: Int, visited: Set[Int], edgeMap:Map[Int, Set[Int]]):Set[Int]={
  if(visited.contains(toVisit)) visited
  else{
    val neighbours = edgeMap.getOrElse(toVisit, Set.empty)
    if (neighbours.isEmpty) visited+toVisit
    else {
      neighbours.flatMap(node => dfs(node, visited+toVisit, edgeMap))
    }
  }
}
def countHighestScoreNodes(parents: Array[Int]): Int = {
  val edgeMap = getEdgeMap(parents)

 val (maxValue, count) =  parents.indices.foldLeft(Int.MinValue.toLong,0){case ((maxValue, count), node)
    =>
    val neighbours = edgeMap.getOrElse(node, Set.empty)
  val visited = neighbours.toList.map{neighbour => dfs(neighbour, Set.empty, edgeMap).size}
  val isInterMediateNode = edgeMap.getOrElse(node, Set.empty).nonEmpty && parents(node) != -1

  val maxProduct : Long= if(isInterMediateNode) (parents.length-1 - visited.sum)*visited.product else if(visited.isEmpty) parents.length-1 else visited.product

  // println(s"visited $visited node $node maxProduct $maxProduct isInterMediateNode ${isInterMediateNode} maxValue ${maxValue} count $count")

   if(maxProduct == maxValue)(maxValue, count+1)
   else if (maxProduct > maxValue)(maxProduct,1)
   else(maxValue,count)
 }

  //println(s"maxValue $maxValue count $count")
  count
}
//countHighestScoreNodes(Array(-1,804,203,748,1098,453,1008,1091,1503,1040,434,77,454,429,1384,1147,1419,1493,1283,1497,1068,1015,1608,1398,392,1086,1436,1562,963,285,895,1210,876,937,267,497,1060,778,119,20,933,1386,1542,872,8,1445,1506,742,256,63,809,54,1277,327,1351,652,188,1346,1531,29,84,968,48,1063,1100,1174,282,348,348,1581,1390,21,86,1444,525,878,962,735,85,404,35,275,1125,1018,498,1329,1520,945,1649,1015,785,386,1382,1104,757,1333,0,675,1205,903,1628,1278,300,1523,1607,417,441,991,1301,1081,561,1103,1337,761,378,663,1292,970,969,1401,1218,783,1082,464,1332,1075,909,1137,264,45,844,971,314,324,869,1465,631,1265,1112,1350,1607,900,148,1124,19,1479,1554,1298,880,1450,721,1385,301,303,789,739,695,1489,689,334,605,1646,1562,777,943,917,636,1102,1372,1110,585,1377,295,1487,1070,887,492,1350,104,837,400,584,919,1364,1190,477,600,94,321,711,1061,1451,735,1078,827,254,508,1304,552,192,971,1645,1130,1073,1604,164,209,835,168,225,1564,682,1544,828,712,1232,646,730,1516,120,531,957,1155,1271,49,1134,1352,872,765,517,649,1311,1288,1647,272,248,1468,1269,352,104,1374,984,1231,732,345,1494,1504,1188,1193,1129,248,193,623,25,1024,581,1032,1384,1127,1121,665,61,767,1381,1539,705,394,1291,909,1478,1196,1108,1454,678,448,259,1538,1229,910,1553,81,294,763,468,1143,318,799,898,26,640,27,1642,230,470,551,701,1169,1194,935,734,1552,1016,774,51,681,1367,393,408,1348,412,500,874,1409,720,775,411,1274,529,1370,1145,625,232,178,393,691,730,1113,976,166,1627,552,118,79,380,332,592,366,1551,1218,1641,1292,1474,443,390,924,98,1496,877,1517,939,1033,245,590,816,1029,556,323,1009,431,1483,188,1094,377,959,1347,1087,352,1157,883,1326,1161,1032,62,1392,1228,291,719,1014,1542,1215,1308,710,617,659,1257,401,1326,1349,422,883,553,640,1244,698,866,426,455,846,1596,115,647,1323,1383,1287,60,917,634,1091,107,1052,1034,1098,1396,1137,710,1210,1421,1007,102,979,109,1389,249,290,178,1370,1501,957,1151,757,358,230,1441,1234,1569,828,802,275,1434,266,423,627,831,1391,171,1420,166,1175,1084,1623,1543,765,721,795,854,1160,1373,16,1409,1082,139,1372,803,368,404,136,73,879,1407,1382,1398,593,557,1088,1076,311,106,1324,259,938,1178,357,904,865,1397,1058,323,943,814,713,189,224,290,389,1563,1193,337,1349,351,1378,144,383,913,1498,43,206,1403,1361,22,1460,857,1213,559,920,56,392,65,824,1626,1160,370,373,539,191,885,1105,151,726,1163,1096,1050,254,762,1477,623,1528,170,118,1460,1019,780,782,1345,650,604,406,1039,1179,300,673,630,1436,1452,969,107,67,1270,766,289,283,1620,748,353,798,741,1295,477,628,1583,775,50,771,369,513,973,1148,1329,616,628,1353,257,631,880,656,595,733,990,813,1194,801,1442,488,945,172,904,360,1552,335,455,376,562,1414,973,237,599,1111,1195,74,245,389,1232,613,1605,217,1345,1559,906,111,96,1233,812,708,1305,250,1335,1040,1285,402,1181,1335,633,1320,174,617,1066,1405,355,975,903,498,1225,204,724,465,361,1543,1226,241,432,643,444,1095,481,125,1013,418,1285,1089,252,1355,840,1467,514,1505,995,79,695,1164,885,1511,163,1530,316,756,1638,525,1356,325,1344,777,1261,676,892,15,667,859,1296,90,1305,1118,1293,1646,1220,1503,114,86,469,176,158,75,65,1529,636,1216,213,1497,836,1138,482,501,76,733,1621,864,30,1419,346,24,11,638,900,580,769,71,784,207,1354,8,1595,645,483,294,204,787,359,357,852,205,1566,106,359,1201,1018,693,1635,577,372,1250,241,216,572,940,475,1139,181,1144,649,1565,381,671,746,1377,240,483,181,1462,941,1298,1601,335,980,1442,1176,1273,1009,1452,798,1633,1475,1007,132,1074,520,1431,444,728,1390,296,56,1279,237,814,955,975,588,629,1041,936,321,542,1173,642,1227,627,221,744,1451,1512,1262,912,326,1143,961,76,447,665,728,659,1525,24,908,202,495,902,1643,1260,1246,898,1020,229,58,1052,933,1448,835,334,201,1121,918,450,4,1577,1438,1163,720,1115,1313,506,754,1158,871,1054,1624,1402,651,1601,1461,214,364,1078,322,671,1005,589,1467,1643,968,375,693,95,58,437,929,1535,967,1048,377,165,382,907,694,762,154,19,1267,833,788,874,125,1565,80,1236,87,696,532,705,1264,384,725,894,1577,955,52,1444,818,1620,1244,1457,717,1249,1039,35,1114,1046,25,1383,836,1217,191,542,1520,1147,528,356,1596,602,1576,289,324,10,669,1602,1269,1445,1239,978,1312,1049,1353,1168,466,841,1374,709,1270,509,1066,1277,680,66,549,226,113,810,910,1590,1432,84,44,876,677,839,1312,1484,1624,1289,1249,1320,1629,666,1013,1112,232,136,750,817,1640,117,383,1011,1012,54,927,228,116,296,416,673,190,581,1253,977,162,1154,225,341,1540,1131,643,466,1280,1362,1162,305,1146,83,429,315,1203,549,339,295,102,692,988,269,1579,509,978,921,96,38,425,314,1499,1128,280,320,111,601,822,156,378,532,685,697,276,246,684,1590,815,1168,1125,1348,21,30,151,46,1612,167,473,1196,1463,1035,465,9,751,576,1337,478,570,641,684,450,374,497,198,1367,61,397,802,271,1418,1175,740,719,797,234,1031,499,447,859,972,1301,816,319,74,1106,1406,318,1161,639,1635,834,1035,1162,154,1212,881,1489,23,1245,691,1493,432,561,14,838,787,1310,1355,452,611,1264,425,616,354,1417,146,791,50,172,1432,791,1086,1225,342,1094,31,1031,1063,240,905,736,1585,936,265,1102,1532,1508,662,634,1450,985,869,1325,1629,1636,179,931,440,1380,1340,351,938,64,411,942,1050,1111,110,701,1156,638,1171,92,1587,1354,994,558,724,1284,1324,112,1220,596,492,1338,249,1598,1118,193,315,1546,1608,569,1019,1234,615,1411,75,128,1422,1279,1276,988,972,832,1138,461,647,771,1308,1545,1648,238,1615,1108,1574,1571,563,1459,1313,1342,704,1088,1558,1582,689,1428,207,1458,238,6,942,1227,114,661,1002,1341,688,622,772,495,1226,462,827,1651,1259,875,677,1071,520,80,1636,1075,1506,336,793,171,1530,846,82,1260,130,1064,169,1310,346,1233,117,864,142,1109,595,1002,1206,952,1219,1289,1338,637,1521,1554,441,924,1103,1441,1471,0,1418,1322,591,566,83,1304,786,834,614,1606,482,653,1524,182,515,987,586,141,355,641,1449,167,1,645,252,1257,1182,590,176,1405,1114,906,1020,1294,1499,414,1231,64,1189,626,190,98,448,951,162,1191,1073,591,223,786,1571,1129,1502,203,851,984,824,470,896,16,48,73,1065,1454,159,585,70,896,1429,1645,584,1294,1144,1494,994,476,1213,1309,615,897,1126,297,213,403,28,766,149,161,1480,1515,10,652,17,633,1541,261,1509,491,1352,1011,1621,713,675,1058,1391,897,1501,810,405,1189,1343,889,211,831,360,653,1026,153,158,916,923,554,1476,1597,68,1529,1433,1134,1439,516,46,1531,161,133,1528,1165,923,951,72,1488,454,1488,367,1449,920,596,1505,892,226,168,989,1135,1176,1351,1230,1600,970,13,1174,201,1286,1525,977,687,280,614,1297,624,1524,1425,1333,889,697,196,1342,764,471,1637,97,1113,1572,785,960,1219,997,853,269,336,1151,739,202,922,407,1288,639,1017,1314,1479,87,517,1097,316,571,1595,332,527,1230,1122,156,224,1140,1246,305,650,1428,160,60,1135,912,70,253,593,165,491,1604,1541,1318,474,544,311,521,929,1583,489,11,1048,1205,214,1361,568,97,27,219,313,1373,685,3,797,609,1171,1496,694,1411,123,1045,422,195,1423,1157,1588,1544,1217,613,580,837,1180,773,1045,574,272,1640,985,844,862,527,1438,692,1183,443,1473,758,1642,609,1614,706,712,669,698,1252,376,340,1169,1049,45,1606,1110,1186,1478,137,1167,442,519,866,1484,211,947,1072,1130,217,1141,257,1254,776,722,1146,1389,726,349,725,729,839,1303,1247,506,556,1104,1585,1095,3,1470,199,830,756,1430,1254,481,740,518,881,153,423,1314,1448,1561,127,493,515,784,303,198,1387,1401,519,1569,251,1156,651,1343,142,478,1572,941,1615,384,313,1206,1433,551,413,919,1170,817))
countHighestScoreNodes(Array(-1,2,0))


/*dfs(0, Set.empty, Map(2 -> Set(1, 3), 0 -> Set(2, 4)))
dfs(1, Set.empty, Map(2 -> Set(1, 3), 0 -> Set(2, 4)))
dfs(2, Set.empty, Map(2 -> Set(1, 3), 0 -> Set(2, 4)))
dfs(3, Set.empty, Map(2 -> Set(1, 3), 0 -> Set(2, 4)))
dfs(4, Set.empty, Map(2 -> Set(1, 3), 0 -> Set(2, 4)))*/
//6718880
