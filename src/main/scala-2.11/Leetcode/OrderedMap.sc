//https://leetcode.com/problems/contains-duplicate-iii/
def containsNearbyAlmostDuplicate(nums: Array[Int], k: Int, t: Int): Boolean = {
 ???
}

//https://leetcode.com/problems/3sum/
case class Pair (a:Int,b:Int,aIndx:Int, bInd: Int)

def threeSum(nums: Array[Int]): List[List[Int]] = {

  if (nums.length < 3) List.empty else {

    val pairSeq: List[Pair] = (for {
      x <- nums.indices
      y <- nums.indices
      pair = if (x != y && x < y) Some(Pair(nums(x), nums(y), x, y)) else None
    } yield pair).toList.flatten

    val z = pairSeq.map { pair => (pair.a + pair.b, (pair)) }
      .groupBy { case (sumPair, pair) => sumPair }
      .mapValues { x => x.map(_._2) }


    nums.zipWithIndex.flatMap { num =>
      val probable = z.get(-num._1)
      probable match {
        case Some(p) => p.filter(pair => pair.aIndx != num._2 && pair.bInd != num._2)
          .map(pair => List(num._1, pair.a, pair.b).sorted)
        case None => List.empty
      }
    }.toSet.toList
  }
}
val nums = Array(-1,0,1,2,-1,-4)

val pairSeq: List[Pair] = (for {
  x <- nums.indices
  y <- nums.indices
  pair = if (x != y && x < y) Some(Pair(nums(x), nums(y),x,y)) else None
} yield pair).toList.flatten

val z = pairSeq.map{pair => (pair.a+pair.b,(pair))}
  .groupBy{case (sumPair, pair) => sumPair}
  .mapValues{x => x.map(_._2)}


 nums.zipWithIndex.flatMap{num => val probable = z.get(-num._1)
   probable match{
     case Some(p) => p.filter(pair => pair.aIndx != num._2 && pair.bInd != num._2)
       .map(pair => List(num._1,pair.a, pair.b).sorted)
     case None =>   List.empty
   }
 }.toSet.toList

def fourSumCount(A: Array[Int], B: Array[Int], C: Array[Int], D: Array[Int]): Int = {
  val cdSum = C.flatMap(c => D.map(d => (c+d))).groupBy(identity).mapValues(_.length)
  A.flatMap(a => B.map(b => (a + b))).groupBy(identity).mapValues(_.length)
    .map{case (abSumKey,value) => cdSum.getOrElse(abSumKey,0)*value}.sum
}

fourSumCount(Array(-1,-1),Array(-1,1),Array(-1,1),Array(1,-1))

Set(0,-1,2).contains(-0)

//https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/
def helperMinOperations(acc:Int,rSum:Map[Int,Int], target:Int, l:Int,lSum:Int,nums:Array[Int], numsLength:Int, min1:Int):Int={
//  println(s"acc $acc, l $l, lSum $lSum, nums ${nums.toList}")
  if(lSum == target  || nums.isEmpty || (acc > min1 && acc < Integer.MAX_VALUE)) acc
  else{
    val right = rSum.getOrElse(target-lSum,-1)
    if(right != -1){
      val newAcc = numsLength-right+(l+1)
      helperMinOperations(newAcc min acc, rSum, target, l+1, lSum+nums.head, nums.tail, numsLength, min1)
    }
    else helperMinOperations(acc, rSum, target, l+1, lSum+nums.head, nums.tail, numsLength,min1)
  }
}
def minOperations(nums: Array[Int], x: Int): Int = {
  val expectedlMin = nums.foldLeft(0,0){case (acc,ele) => if(acc._1 < x) (acc._1+ele, acc._2+1) else acc}

  val lMin = if(expectedlMin._1 == x) expectedlMin._2 else Integer.MAX_VALUE

  val rSum = nums.zipWithIndex
    .scanRight(0,nums.length){case (ele,acc) => (acc._1+ele._1, ele._2)}.tail.toList.toMap

  val lrMin = helperMinOperations(if(nums.head == x) 1 else Integer.MAX_VALUE,rSum,x,0,nums(0), nums.tail, nums.length, lMin)

  val min1 = lrMin min ( lMin)

  println(s"rSum ${rSum} and lrMin is $lrMin lSum $lMin min1 $min1")

  if(rSum.contains(x)) min1 min(nums.length-rSum(x))
  else{
    if(min1 == Integer.MAX_VALUE) -1
    else min1
  }
}
/*val arr = Array(1,1,3,2,3)
arr.zipWithIndex.scanRight(0,arr.length){case (ele,acc) => (acc._1+ele._1, ele._2)}.toList.toMap*/
val arr = Array(7756,5941,4175,7549,5096,638,9312,9827,3902,1819,6192,5034,727,7540,7728,7572,9136,4421,3100,3527,6627,1045,5668,9043,5745,2194,6272,9978,1687,9227,1722,5083,1327,1398,1798,1415,8512,3603,4923,8073,2177,9145,3310,6595,9331,2327,8656,5268,4438,840,695,6835,8021,2337,1468,9143,6112,1105,9124,1480,8031,5331,1211,2843,8789,5974,6058,478,3587,169,2353,9399,8034,6721,9434,1658,7258,6640,2140,6849,2189,8263,7754,2492,4316,3696,1540,7024,5,1443,4547,7169,1344,663,2743,7117,3866,4537,763,4287,9905,9127,5792,6622,5619,4113,3813,8052,8974,449,39,8143,6246,6918,6319,7757,7228,8980,6690,4520,2178,4261,8497,6691,5697,7985,2708,6097,9312,9674,7064,937,4276,3954,7672,3207,9107,4828,3819,9200,2564,7466,9421,4664,7641,8509,3794,7110,7138,1924,9512,6951,8278,8209,1189,5278,8924,2116,3871,5897,6333,8686,6065,6447,8117,2658,7418,3733,6499,114,984,9632,8671,5430,4373,2496,7300,2052,9167,3730,1957,8618,3865,6168,2155,8283,8503,5657,4111,6954,5708,5450,1610,7579,3192,4815,7500,8584,1488,9680,6457,7383,3230,1404,7601,3577,5491,5591,8237,6726,7613,6558,8924,4800,8264,2112,5499,1744,8824,5123,2484,8750,5446,8207,5874,9999,4208,9695,9015,6478,3276,5632,9081,6526,997,4144,4485,5389,9564,3164,4626,6601,2239,4551,8906,5892,4955,8163,7014,1238,9050,2719,3727,2171,5227,8724,8021,224,6805,7724,937,2520,5445,3536,6795,7858,426,1316,4472,2870,9357,7396,4925,2752,3115,6990,5401,3143,6931,8263,5596,9538,7915,3269,9631,2030,4572,7140,5224,6209,581,1632,4593,8667,9956,9737,7024,1118,9398,8447,1363,8850,5590,1420,8559,8978,23,5959,4587,8032,6101,256,8321,699,9991,3492,4193,8962,3025,9681,8811,7009,790,703,9686,5647,1970,7019,5458,7567,9492,9273,5240,7408,8282,2098,7284,7564,4281,5679,9567,2170,6559,3096,478,5901,201,8991,4980,708,8938,97,2339,1231,1207,9893,5698,7682,9359,7760,6181,4701,3352,2078,7366,8584,4759,7642,5423,5560,4159,6049,9600,8979,1713,3998,371,6799,2650,9864,6151,5913,5585,648,3652,7206,9221,9409,5346,3626,1622,3276,2841,3809,1892,5384,8126,3977,295,6767,3633,2065,372,3704,4974,915,3537,3552,8487,1693,5377,4671,4655,8231,8225,3800,3800,9933,5696,242,5586,7402,2697,9334,6541,2426,5328,2296,7733,6544,128,604,9777,4910,4929,6437,6388,7577,2674,9658,8777,8047,1082,5351,7242,5232,4803,5193,5228,5738,6759,8866,2648,1723,5434,2675,4965,6788,2525,8523,761,7974,8064,169,928,7116,2542,532,287,1567,2215,1668,2135,7220,6051,9919,3640,8101,9357,2199,1506,6119,6623,8039,9596,8650,8836,7671,7283,2268,383,9682,9482,4102,139,3938,7762,1913,8104,1232,9584,2612,7824,2206,63,6855,9424,1982,6658,6688,8319,4960,166,2089,3447,6228,7001,5404,5251,5191,8687,2654,8580,336,7713,4773,1590,907,1855,70,2515,8349,9492,3554,1434,9184,8682,1455,7601,6167,5626,3122,2235,4975,5569,9368,5597,2233,8584,8471,6543,7627,9494,7994,7098,6481,8080,3840,162,8885,7670,4090,4220,6651,5401,2861,5412,2005,6301,7106,331,5597,6168,2820,4564,4517,5268,4306,5273,4534,935,5874,694,156,6784,3062,2008,5190,1928,2990,1703,8826,8970,6940,6126,9613,5679,5723,8204,8873,5245,4740,4934,8554,4822,562,5064,3977,5383,4283,7037,2656,1541,7771,1095,3481,5127,7749,5724,1756,8393,8025,2694,528,300,1096,5288,467,7829,7967,1585,8006,1801,1316,585,6411,3886,9273,5485,8931,5238,7455,9027,383,2179,5,6490,3077,1020,8240,1473,7241,3887,3311,2552,544,6721,9613,2796,6428,3958,3131,4404,5894,9253,3296,8933,6541,9875,7223,7195,2295,5322,2596,9859,5586,5534,138,6642,1616,7362,4647,9926,3220,1633,2743,4096,8185,2208,1930,1851,6444,1870,1476,3522,8104,2218,6743,5331,9266,7979,2031,301,8807,4964,4058,5520,256,8473,6940,8316,9168,8077,9803,3208,3944,9140,4443,5250,4381,2489,2346,3078,4507,4958,2353,4250,3835,4643,6784,3160,5186,9984,4477,932,8657,8370,4790,7505,5776,1084,792,2341,1960,9497,7743,521,8848,7632,8802,7772,9704,4958,6097,4820,7078,5385,6353,4787,4245,5351,872,281,2849,580,2849,1446,6677,2951,7163,3501,3891,6144,40,6638,5182,5079,1813,1820,9151,11,6252,4348,3099,7529,5326,2711,8566,1125,1346,7877,7793,1351,2652,9393,1632,8337,9850,4048,8429,5196,4954,7568,2977,5706,96,8592,9770,7231,576,5881,3931,1321,8052,4057,670,7485,15,1132,8737,7343,6367,2158,7154,2454,355,9845,1770,3522,6667,7016,4757,3248,2017,9569,9443,6459,5290,3957,5320,5856,5855,2868,1675,964,6069,2887,7100,5808,8333,5556,3910,2603,8940,9622,911,5767,7430,187,3881,2261,9715,1067,2372,99,505,8952,2666,6146,1154,6059,828,7913,5799,853,7278,3692,8929,7997,4935,1005,6932,9226,5591,9447,6930,5996,308,3806,2699,410,7886,2418,2064,4427,8222,3981,3753,4841,3891,4211,682,5656,3580,3222,5801,847,2431,6892,6968,5057,944,5505,9770,926,5550,9243,6681,5687,5401,8164,1892,6638,25,7922,174,4980,400,8196,5722,2650,736,4187,2833,89,2453,3276,8345,6312,9571,2244,6601,173,1882,4358,3473,8323,3739,7734,3351,9638,9767,4422,5866,2625,5946,3089,654,6205,4157,5172,5748,2553,7720,3854,450,5457,9301,7756,5289,6788,7502,403,7010,8452)
minOperations(Array(1000,1,1,2,3),1004)


